services:
  trino-gateway:
    image: trinodb/trino-gateway:latest
    container_name: trino-gateway
    hostname: trino-gateway
    networks:
      iceberg_net:
        aliases:
          - trino-gateway
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./trino-gateway/gateway-ha-config.yml:/opt/trino/gateway-ha-config.yml
      - ./trino-gateway/log.properties:/opt/trino/log.properties
      - ./trino-gateway/certs/private.key:/etc/certs/private.key
      - ./trino-gateway/certs/public.key:/etc/certs/public.key
    depends_on:
      trino-1:
        condition: service_healthy
      trino-2:
        condition: service_healthy
  trino-1:
    image: trinodb/trino:latest
    container_name: trino-1
    hostname: trino-1
    networks:
      iceberg_net:
        aliases:
          - trino-1
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes: &trino-volumes
      - ./trino/catalogs:/etc/trino/catalogs
      - ./trino/etc/config.properties:/etc/trino/config.properties
      - ./trino/etc/jvm.config:/etc/trino/jvm.config
    depends_on:
      minio:
        condition: service_healthy
      hive-metastore:
        condition: service_healthy
  trino-2:
    image: trinodb/trino:latest
    container_name: trino-2
    hostname: trino-2
    networks:
      iceberg_net:
        aliases:
          - trino-2
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes: *trino-volumes
    depends_on:
      minio:
        condition: service_healthy
      hive-metastore:
        condition: service_healthy
  postgresdb:
    image: postgres:17.2
    container_name: postgresdb
    hostname: postgresdb
    networks:
      iceberg_net:
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=gateway,metastore,dbt
      - PGUSER=postgres
    volumes:
      - postgresdb-data:/var/lib/postgresql
      - ./trino-gateway/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
      - ./trino-gateway/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "gateway", "-U", "postgres"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
  hive-metastore:
    hostname: hive-metastore
    image: starburstdata/hive:3.1.3-e.13
    ports:
      - "9083:9083" # Metastore Thrift
    environment:
      HIVE_METASTORE_DRIVER: org.postgresql.Driver
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://postgresdb:5432/metastore
      HIVE_METASTORE_USER: postgres
      HIVE_METASTORE_PASSWORD: postgres
      HIVE_METASTORE_WAREHOUSE_DIR: s3://datalake/
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minio
      S3_SECRET_KEY: minio123
      S3_PATH_STYLE_ACCESS: "true"
      REGION: ""
      GOOGLE_CLOUD_KEY_FILE_PATH: ""
      AZURE_ADL_CLIENT_ID: ""
      AZURE_ADL_CREDENTIAL: ""
      AZURE_ADL_REFRESH_URL: ""
      AZURE_ABFS_STORAGE_ACCOUNT: ""
      AZURE_ABFS_ACCESS_KEY: ""
      AZURE_WASB_STORAGE_ACCOUNT: ""
      AZURE_ABFS_OAUTH: ""
      AZURE_ABFS_OAUTH_TOKEN_PROVIDER: ""
      AZURE_ABFS_OAUTH_CLIENT_ID: ""
      AZURE_ABFS_OAUTH_SECRET: ""
      AZURE_ABFS_OAUTH_ENDPOINT: ""
      AZURE_WASB_ACCESS_KEY: ""
      HIVE_METASTORE_USERS_IN_ADMIN_ROLE: "admin"
    networks:
      iceberg_net:
        aliases:
          - hive-metastore
    depends_on:
      - postgresdb
  minio:
    hostname: minio
    image: "minio/minio:RELEASE.2022-05-26T05-48-41Z"
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      iceberg_net:
        aliases:
          - minio
  mc-job:
    image: minio/mc:latest
    entrypoint: |
      /bin/bash -c "
      sleep 5;
      /usr/bin/mc config --quiet host add myminio http://minio:9000 minio minio123;
      /usr/bin/mc mb --quiet myminio/datalake
      "
    networks:
      iceberg_net:
        aliases:
          - mc-job
    depends_on:
      - minio
networks:
  iceberg_net:

volumes:
  postgresdb-data:
